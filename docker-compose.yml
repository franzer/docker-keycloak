version: '3'

networks:
  keycloak:
    driver: bridge

services:
  postgres:
    container_name: keycloak_db
    image: postgres:latest
    volumes:
      - ./postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: password
    networks:
      - keycloak
    expose:
      - 5432:5432

  kc1:
    container_name: keycloak1
    image: quay.io/keycloak/keycloak:17.0.0-legacy
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      PROXY_ADDRESS_FORWARDING: "true"
      CACHE_OWNERS_COUNT: 2
      CACHE_OWNERS_AUTH_SESSIONS_COUNT: 2
      JGROUPS_DISCOVERY_PROTOCOL: JDBC_PING
      JGROUPS_DISCOVERY_PROPERTIES: "datasource_jndi_name=java:jboss/datasources/KeycloakDS,initialize_sql=\"CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))\",remove_all_data_on_view_change=true"
    logging:
      options:
        max-size: 500m
    networks:
      - keycloak
    expose:
      - 8080
    depends_on:
      - postgres

  kc2:
    container_name: keycloak2
    image: quay.io/keycloak/keycloak:17.0.0-legacy
    environment:
      DB_VENDOR: postgres
      DB_ADDR: postgres
      PROXY_ADDRESS_FORWARDING: "true"
      CACHE_OWNERS_COUNT: 2
      CACHE_OWNERS_AUTH_SESSIONS_COUNT: 2
      JGROUPS_DISCOVERY_PROTOCOL: JDBC_PING
      JGROUPS_DISCOVERY_PROPERTIES: "datasource_jndi_name=java:jboss/datasources/KeycloakDS,initialize_sql=\"CREATE TABLE IF NOT EXISTS JGROUPSPING (own_addr varchar(200) NOT NULL, cluster_name varchar(200) NOT NULL, created TIMESTAMP DEFAULT CURRENT_TIMESTAMP, ping_data BYTEA, constraint PK_JGROUPSPING PRIMARY KEY (own_addr, cluster_name))\",remove_all_data_on_view_change=true"
    logging:
      options:
        max-size: 500m
    networks:
      - keycloak
    expose:
      - 8080
    depends_on:
      - postgres

  lb:
    container_name: keycloak_lb
    image: nginx:alpine
    volumes:
      - <LOCATION HERE>/keycloak/nginx.conf:/etc/nginx/conf.d/default.conf
      - <LOCATION HERE>/keycloak/certs:/etc/ssl/certs
    ports:
      - "80:80"
      - "443:443"
    networks:
      - keycloak
    depends_on:
      - keycloak1
      - keycloak2
